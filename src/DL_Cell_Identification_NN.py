# -*- coding: utf-8 -*-
# Creator: Chau Pham
# Referenced https://github.com/Rajsoni03/neuralplot for visualizing keras model in NN
# Input: Databases from BM_cytomorphology_data and bone_marrow_cell_dataset
# Output: Classification of cell type and accuracy score, keras model, loss graph
# THIS ONLY WORKS IN GOOGLE COLAB ONLY NOT VSCODE
"""DL_Cell_Identification_NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ows8N7qljLvSWH1HxSlGfkr1VKqpXRM7?usp=sharing

# Neural Net Visualization

## Install neuralplot library
"""
# For google colab only
# !pip install neuralplot

"""## Import Libraries"""

from neuralplot import ModelPlot
import tensorflow as tf
import numpy as np

# Commented out IPython magic to ensure Python compatibility.

# Uncomment while using Colab.
# %matplotlib inline

"""## Creating Model"""

inputs =  tf.keras.Input(shape=(32,32,3))
x =  tf.keras.layers.Rescaling(1.0 / 255)(inputs)  # Rescale pixel values from [0, 255] to [0, 1]
x =  tf.keras.layers.RandomFlip("horizontal_and_vertical")(x)  # Data augmentation: random flips
x =  tf.keras.layers.Conv2D(32, 3, activation="relu")(x)  # First convolutional layer
x =  tf.keras.layers.MaxPooling2D()(x)  # First pooling layer to reduce spatial dimensions
x =  tf.keras.layers.Conv2D(64, 3, activation="relu")(x)  # Second convolutional layer
x =  tf.keras.layers.MaxPooling2D()(x)  # Second pooling layer
x =  tf.keras.layers.Conv2D(128, 3, activation="relu")(x)  # Third convolutional layer
x =  tf.keras.layers.MaxPooling2D()(x)  # Third pooling layer
x =  tf.keras.layers.Flatten()(x)  # Flatten the 3D output to 1D for the dense layers
x =  tf.keras.layers.Dense(128, activation="relu")(x)  # First dense layer
x =  tf.keras.layers.Dropout(0.5)(x)  # Dropout layer to prevent overfitting
outputs =  tf.keras.layers.Dense(2, activation="softmax")(x)  # Output layer with softmax activation for multiclass classification

model =  tf.keras.Model(inputs=inputs, outputs=outputs)  # Create the model

model.summary()

modelplot = ModelPlot(model=model, grid=True, connection=True, linewidth=0.1)
modelplot.show()

modelplot = ModelPlot(model=model, grid=False, connection=True, linewidth=0.1)
modelplot.show()

